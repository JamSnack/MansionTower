<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_legs</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
randomize();

grav = 0.5;
maxgrav_default = 7;
maxgrav_wall = 1;
maxgrav = 7;
hsp = 0;
vsp = 0;
jumpspeed = 6;
wall_jumpspeed = 5;
movespeed = 3;
canWallJump = true;
frict_default = 2;
frict_air = 0.1;
frict = frict_default;
hForce = 0;
vForce = 0;
movementLocked = false;
canShoot = true;
canHurt = true;
hurtAlarm = 2;
knockType = "LAND";
dead = false;
ox = x; //Origin X;
oy = y; //Origin Y;

//Sprite
state = "IDLE";
xscale = 1;
image_speed = 15/60;
skin = irandom(sprite_get_number(spr_player));

//Stats
maxHp = 10;
hp = maxHp;
firerate = 20; //seconds per shot
b_speed = 3; //The speed of the bullet;
b_damage = 1; //The damage of the bullet;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset canHurt;
canHurt = true;

if dead == true  
{
    x = ox;
    y = oy;
    dead = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset canShoot
canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset movement Lock
movementLocked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead == true then exit;

//Get the player's input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check(ord("W"));
key_down = keyboard_check(ord("S"));

if place_meeting(x,y,obj_platform) then key_down = true;

//React to inputs
move = key_left + key_right;
if hForce == 0 || movementLocked == false { hsp = approach(hsp,move * movespeed,0.5); }
vsp += grav;
vsp = clamp(vsp,vsp,maxgrav);

if key_jump &amp;&amp; ((place_meeting(x,y+1,OBSTA) || (place_meeting(x,y+1,obj_platform) &amp;&amp; vsp &gt;= 0)))
{
    vsp = key_jump * -jumpspeed;
    vForce = 0;
}

//Horizontal Collision
if (place_meeting(x+hsp+hForce,y,OBSTA))
{
    while(!place_meeting(x+sign(hsp+hForce),y,OBSTA))
    {
        x += sign(hsp+hForce);
    }
    
    hForce = 0;
    frict = frict_default;
    
    //Wall Jump if possible
    if vsp != 0
    {
        maxgrav = maxgrav_wall;
        
        if !place_meeting(x,y+8,OBSTA) &amp;&amp; keyboard_check(ord("W")) &amp;&amp; (key_right || -key_left) &amp;&amp; canWallJump == true
        {
            var force_to_add = (wall_jumpspeed/2)*-image_xscale;
        
            if !(place_meeting(x+hsp+hForce+force_to_add,y,OBSTA))
            {
                hForce += force_to_add;
                frict = frict_air;
                vForce = -(wall_jumpspeed);
                vsp = 0;
                canWallJump = false;
                movementLocked = true;
                if alarm[0] = -1 then alarm[0] = 8;
                image_xscale = -image_xscale;
            }
        }
    }
    
    hsp = 0;
    canWallJump = true;
    state = "WALL";
    
} else maxgrav = maxgrav_default;

x += hsp+hForce;
hForce = approach(hForce,0,frict);

//Vertical Collision
if (place_meeting(x,y+vsp+vForce,OBSTA))
{
    while(!place_meeting(x,y+sign(vsp+vForce),OBSTA))
    {
        y += sign(vsp+vForce);
    }
    
    vForce = 0;
    vsp = 0;
    frict = frict_default;
    canWallJump = true;
    movementLocked = false;
} else if vsp+vForce &gt; 0 &amp;&amp; (place_meeting(x,y+vsp+vForce,obj_platform) &amp;&amp; !key_down)
{
    while(!place_meeting(x,y+sign(vsp+vForce),obj_platform))
    {
        y += sign(vsp+vForce);
    }
    
    vForce = 0;
    vsp = 0;
    frict = frict_default;
    canWallJump = true;
    movementLocked = false;
}

// - platforms
if key_down &amp;&amp; place_meeting(x,y+1,obj_platform)
{
    vsp+=grav;
}


y += vsp+vForce;
vForce = approach(vForce,0,frict);

//Sprites
if movementLocked == false &amp;&amp; hsp != 0  &amp;&amp; vsp == 0
{
    state = "MOVE";
} else if hsp == 0 &amp;&amp; vsp == 0
{
    state = "IDLE";
} else if vsp &gt; 0 &amp;&amp; !position_meeting(x+12*move,y,OBSTA) then state = "JUMP"

if maxgrav == maxgrav_wall then state = "OBSTA";

switch state
{
    case "MOVE":
    {
        image_speed = 15/60;
        if hsp+hForce != 0 then image_xscale = sign(hsp+hForce);
    }
    break;
    
    case "IDLE":
    {
        image_speed = 0;
        image_index = 0;
    }
    break;
    
    case "OBSTA":
    {
        image_speed = 0;
        image_index = 0;
    }
    break;
    
    case "JUMP":
    {
        image_speed = 0;
        image_index = 1;
        if hsp+hForce != 0 then image_xscale = sign(hsp+hForce);
    }
    break;
}

if dev == true
{
    if keyboard_check(vk_up) then y-=(5+vsp);
    if keyboard_check(vk_down) then y+=(5+vsp);
    if keyboard_check(vk_left) then x-=5;
    if keyboard_check(vk_right) then x+=5;
}

//Death
visible = !dead;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot a bullet
if canShoot == false then exit;

var dir = point_direction(x,y,mouse_x,mouse_y);
var i = instance_create(x+lengthdir_x(6,dir),y+lengthdir_y(6,dir)+6,obj_bullet);
i.speed = b_speed;
i.direction = dir;
i.damage = b_damage;

canShoot = false;
alarm[1] = firerate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Construct the player
var angle = image_angle;
var xscale = image_xscale

switch state
{
    case "MOVE":
    {
        angle = 0;
    }
    break;
    
    case "IDLE":
    {
        angle = 0;
    }
    break;
    
    case "WALL":
    {
        xscale = -xscale;
        if xscale == 1
        { angle = 15; } else angle = -15;
    }
    break;
    
    case "JUMP":
    {
        angle = -25;
    }
    break;
}

draw_self();
draw_sprite_ext(spr_player,skin,x,y,xscale,image_yscale,angle,c_white,image_alpha);

//Draw gun
var dir = point_direction(x,y,mouse_x,mouse_y);
if dir &gt; 90 &amp;&amp; dir &lt; 270 then gun_xscale = -1 else gun_xscale = 1;
draw_sprite_ext(spr_gun,clamp(skin,0,sprite_get_number(spr_gun)),x+lengthdir_x(8,dir),y+lengthdir_y(8,dir)+6,1,gun_xscale,dir,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>skin += 1;
if skin+1 &gt; sprite_get_number(spr_player) then skin = 0;
b_speed = irandom(8)+1;
//The faster the bullet, the higher the time it takes to fire it.
firerate = (30)+(b_speed*4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="98">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layoutControl.maxFloors += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
